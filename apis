QUEUE
------
priority_queue<int,<vi(optioal)>,greater<int(optional)> > pq;
pq.push()
pq.top()
pq.pop()

SORTING
---------
BUBBLE SORT    : O(N^2) Worst when arr is desc and O(N) Best when sorted O(1) space (Stable and inplace)
Selection Sort : O(N^2) and O(1) space adv as never makes more writes when memory operations are costly
Insertion sort : (playing cards) O(n^2) if desc and O(n) if asc and O(1) space (Inplace and stable and online) adv when almst sorted and (Binary 		         Insertion Sort which uses binary search to search elements in array)
Merge sort     : O(nlogn) in all cases O(n) space (Stable) no random access of data as in quicksrt(linked list)
		1) Inversion count 2) External sorting when large data in hardisk
HEAP SORT      : O(nlogn) time and O(n) space (inplace typical imple not stable but can be made stable)
		1) k largest elements
		2) sort elements in K almost sorted (insert first k+1 elements in heap go on removing and displaying in sorted order as elements are 			 only k steps away cannot escape)
Counting Sort  : O(n+k) time and space k is num of digits or characters adv sorting text as characters are in known range
Bucket sort    : floating point created linkedlist and then sort them
shell sort     : O(n^2)	choose gap=n/2 initially then go on comparing and swaping then reduce gap/=2; until zero
Radix sort     : O(d*(n+b)) d->digits and b-> base of number uses counting sort as subrotine and can sort only numbers

SEARCHING
----------
Linear : sorted or unsorted O(n)
Binary : sorted log(n)
JUMP : sorted sqrt(n)
INTERPOLATION Search : Uniform data better than binary search
		       If elements are uniformly distributed, then O (log log n)). In worst case it can take upto O(n).
		       pos=lo+[(x-arr[lo])/(arr[hi]-arr[Lo])]*(hi-lo)		x     ==> Element to be searched
HEAP
---------
maxheap ==> less<int>()
minheap ==> greater<int>()
make_heap(all(vec),greater<int>()) ==> minheap
vec.push_back(ele) and push_heap(all(vec),greater<int>()) ==> pushing
ele=vec.front();pop_heap(all(vec),greater<int>());vec.pop_back() ==> poping

bitset
------
bitset<500> bt; 0 based
bt.set(2)
bt.flip(2) or bt.flip() all flip
br.count() number of set bits
br.reset() resets whole to zero
bt.test(i)
acess bt[i][j]
bt.any() any bit set
bt.none() none bit set


Priority Queue
--------------
Max priority queue ==> priority_queue<ii,vii,greater<ii> > pq;
Min priority queue ==> multiset <ii > pq;  

DP
--------
Minimum edit distance f(i,j) = min(f(i,j-1)+ca,
				   f(i-1,j)+cd,
				   f(i-1,j-1)+ct if(s[i-1]==s[j-1]) ct=0;
				   ) 
		       f(i,0)=i;f(0,j)=j;
LCS ==> f(i,j)=1+max(f(i,j-1),f(i-1,j)) if(s[i-1]==s[j-1]) f(i,j)=1+f(i-1,j-1)
LCSubstr = f(i,j) 1+f(i-1,j-1)	if(s1[i-1]==s2[j-1])
	   else 0
	   take max on every first update		
Egg Drop = 1+min(forxfloors max(f(x-1,e-1),f(n-x,e))
	  f(1,j)=1; f(i,1)=i;
LIS two loops i-> 1ton and j-> 1toi
Longest Palindomic Substring : 1) search all possibilities O(N^3) or expand from all in two dir O(n^2)
			       2) DP   if(i==j)  return 1;
				       if(s[i]==s[j])  return 2+solve(i+1,j-1);
				       return max(solve(i+1,j),solve(i,j-1)); 
			       3) Manachars Algo
LCA 
0/1 knapsack == (i,w) -- (i+1,w+wi) right to left
		      -- (i+1,w)
0/Inf knapsack == (i,w) -- (i,w+wi) left to right
			-- (i+1,w)

Maximum rectangle dp[i][j]=min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])

PHI and PILLAI
---------------
Pillai(n)=sum(k=1->n) (gcd(k,n)) = sum(d/n) (d*phi(n/d)) where d are divisiors of n
Phi(n) = prod(p/n) (n*(1-1/p)) where p are prime factors of n
void compute_phi()
{
  for(int i=1;i<=MAXV;i++)  phi[i]=i;
  for(int i=2;i<=MAXV;i++)
  {
    if(phi[i]==i)
    {
      for(int j=i;j<=MAXV;j+=i)
      {
        phi[j]-=phi[j]/i;
        phi[j]=mod(phi[j]);
      }
    }
  }
}
void compute_pillai()
{
  for(int i=1;i<=MAXV;i++)
  {
    for(int j=i;j<=MAXV;j+=i)
    {
      pil[j]+=i*phi[j/i];
      pil[j]=mod(pil[j]);
    }
  }
}
Comparator functions
---------------------
greater<int>()
greater_equal<int>()
less<int>()
less_equal<int>()
not_equal_to<int>()
less_equal<int>()
equal_to<int>()

SET
-------
vi a={1,2,4,5},b{4,5,6,7},c,d,e,f; (start1,end1,start2,end2,res)
set_union(all(a),all(b),back_inserter(c)) c={1,2,3,4,5,6,7}
set_intersection() ={4,5}
set_difference()   ={1,2}
set_symmetric_difference() ={1,2,6,7}  instead of vi for set<int> s1;use inserter(s1,s1.begin())

GRAPHS
------
I
--------
DETECTING CYCLES: BACK EDGES not !vis in dfs
BFS -> O(V+E) adj list else O(V2) shortest distance and all possibilites at particular distance and 0/1 bfs with weights 1
	Variants : Implicit graphs 2d 3d
		   with some Blocked vertices
	           multisources BFS
		   Source destination interchanged
DFS -> O(V+E) adj list else O(V2) check all possibilites in one direction and no of connected components
MST -> minimum cost with n-1 edges with weights
SHORTEST PATHS -> can be done with bfs but with weights
	      -> Shortest path contains at most edges, because the shortest path couldn't have a cycle as the shortest path to all other vertices 			could be found without the need for a second visit for any vertices.
		TWO ALGOS
		1) KRUSKAL (ElogV) for sorting --> greedy edges smallest to largest edges with UDFS Data structure to check if nodes belong to same set
		2) Prims ((V+E)logV) logV because insertion into priority queue -->  greedy next nodes use priority queue to maintain the next least 				weighted edge and simliar to post bfs(POST!!?)
	Variants 1) minimum spanning subgraph ->  with fixed edges already given keep runngin kruskal for the rest
		 2) maximum spanning tree -> run kruskal by reveser sorting
		 3) minimum spanning forest -> form k components forest run kruskal and stop when k components are found
		 4) second mst -> form first using kruskal ElgV and then for each v-1 edges in mst remove and try E edges O(VE) take the minimum. 
			(HINT : can do better using lca or ufds try!!)
		 5)minimax path problem is a problem of finding the minimum of maximum edge weight among all possible paths between two vertices itoj.
		       Can be found by MST+max edge in the MST O(ElogV+V) similiar can be use for maximin
SSSP(Single Source Shortest Path) ==> 
		1) Bellmann ford O(V.E) if V=E2 then O(E3) --> only positive edges two loops 0 to n-1 and pairs of edges {wt,x,y} dist[y]>dist[x]+wt 				relax
		2) dijkstra normally (Wrong ans if -ve cycles are present not -ve edges) O(V2) but with priority queue reduces to O(V+ElogV) --> 				similiar to prims instead of greedy edges greedy total distances using multiset as priority queue
ALL PAIR SHORTEST PATHS --> 
		1) Floyd Warshall O(V3) for V<400 three loops ktoN itoN jtoN d[i][j]=min(d[i][j] (not consider k),d[i][k]+d[k][j] (consider k) 
		dp state(frm i,to j,intremediate k) k=[-1to V-1] -1 meaning representing edge without any intermediate
		Space reqd dp[k][i][j] but space saving trick as only k-1 table reqd to compute the next table of (i,j)
		Variants --> 1) par[i][j]=i to print path
			     2) bit manip is_connected[i][j]|=(is_connected[i][k]&is_connected[k][j])
			     3) cheapest negative cycle initalize main diagonal (i,i) to INF if reduced then -ve cycle as (i,i) distance indicates 					cycle and the smallest non negative value is the cheapest negative cycle value.
		 	     4) minimax minimax[i][j]=min(minimax[i][j],max(minimax[i][k],minimax[k][j]));
			     5) Diameter of the graph solve floyd O(V3) and max value in dist in O(V2) printpath the lenght of path is diameter of grap
			     6) find SCC's for small graph using is_connected[i][j]&&is_connected[j][i] then i,j belong to same SCC
FLOOD FILL  --> O(m.n)	
ARTICULATION POINTS AND BRIDGES: O(V+E) same as DFS or BFS No Bridge but can have articulation point but in bridge one of the nodes will be 					articulation point
				presence of a cycle indicates articulation point as the lowlink==id fails only when has 0 or 1 outgoind edges i.e root
eg] 1    3
     \  / 
       2   	Tree is composed of only bridges.. 3 types of edges 1)Fwd-tree edges of DFS 2)Back->same subtree ancestor 3)Cross->different subtree
     /   \														     (only in directed)
    4     5
BICONNECTED GRAPHS and COMPONENTS: Former is the graph which does not have articulation point i.e removing any of the nodes does not increase the 					   connected components in the graph.
				  Later is in which all connected components of the graph are biconnected (USE STACK!!) store u-v if an articulation 					point is found pop from stack until edges s it is found which consists all the edges forming one biconnected component

CONNECTED COMPONENTS --> strong conncectivity applies to only directed graphs
Strongly connected graphs and components : 
	1) TARJANS METHOD : O(V+E) for directed graphs find using Tarjans stack go on pushing until conditon lwlnk[s]==disc[s](similar to ap) and pop 					until s id found and make the lwlnk values oo so cross edges cannot be taken into consideration
	2) KOSARAJU O(V+E) two times dfs first or normal push elements onto stack after exploring all edges of that vertex and in second dfs on 			transposed graph pick element from stack if not visited and do dfs to get sccs
TOPOLOGICAL SORT : 1 ) Using BFS O(V+E) not visited and indegree zero push into queue and also into tsort array at front while poping from queue and 				also subtract indegrees from the poped vertex from the queue..For lexicographically toposrt use set or priority queue instead
		   2 ) Using DFS O(V+E) go on pushing onto the stack (or array) after exploring (reverse array )
BIPARTITE or two colorable: using bfs color source with one color next layer with other if any violations conclude not biparitie and bipartite graph 					has not odd cycle
SPECIAL GRAPHS:1) DAG -> easy for dp states vertices directed edges transitions and topological sort overlapping subproblems.
			i)longest path in dag use SSSP multiply edge weights by -1.
			ii) counts paths in dag dp[0]=1 and dp[v]+=dp[u] vertex u in topsort having edge u->v 
	       2) TREE -> articulation point O(V) find vertices with deg > 1 and all edges are bridges
			  SSSP Shortest path all paths are unique so just add the edge weights BFS or DFS O(V)
			  APSP call SSSP V time O(V2)
			  Diameter of graph (for other graps floyd O(V3) and then largest find O(V2) ) but in tree do DFS/BFS twice first find the 				  furtherst reach and then dfs/bfs from there to again the furthest.
	       3) EULERIAN:Euler path is defined as a path in a graph which visits each edge of the graph exactly once.
			   CHECK FOR Euler Path: If zero or two vertices have odd degree and all other vertices have even degree. Note that only one 				   vertex with odd degree is not possible in an undirected graph (sum of all degrees is always even in an undirected graph)
			   i.e in simple all the vetices except start and end should have degree two(one for coming and other going)
			   Euler tour/cycle is an Euler path which starts and ends on the same vertex.
			   CHECK FOR EULRIAN CYCLE/TOUR: All the vertices should be of even degree
	       4) BIPARTITE: set of vertices V can be partitioned into two disjoint sets V 1 and V 2 and all edges in (u, v) ∈ E has the property 				   that u ∈ V 1 and v ∈ V 2
II
---------
LCA(Least Common ANcestor Binary Uplifting ) table[k][i] k->2^kth jump i -> node 
table[i] can be computed using values from table[i-1] 
Uses --> root and find distance from node to node and also store min on path and jmp in powers of k and find min on path


III
-------
Tree Traversal trickery --> update and query values
MAX SUM PATH -> 4 cases 1) root NULL 0
			2) leaf root->data
			3) only one subtree present l+root->data or r+root->data
			4) both present update global max with l+r+root->data and continue searching with max(l,r)+root->data
Check If given is BST ;
        	if(!root)   				return true;

        	if(root->val>mx||root->val<mn||		return false;
           	root->left&&root->val==mn||
           	root->right&&root->val==mx)
        						return check(root->left,mn,root->val-1)&&check(root->right,root->val+1,mx);
Check If tree is symmetric or mirror
        if(p==NULL||q==NULL)    return p==q;
        return (p->val==q->val&&check(p->left,q->right)&&check(p->right,q->left));
Construct bbinary tree with 1) inoder and preorder
			    2) inorder and postorder
			    3) preorder and postorder(possible if only the tree is full binary tree)
INFO : The maximum number of nodes at level ‘l’ of a binary tree is 2^(l-1).
       Maximum number of nodes in a binary tree of height ‘h’ is 2^h – 1.
       In a Binary Tree with N nodes, minimum possible height or minimum number of levels is  ceil Log2(N+1).
       A Binary Tree with L leaves has at least   ⌈ Log2L ⌉ + 1   levels.
       Full Binary Tree A Binary Tree is full if every node has 0 or 2 children. L = I + 1 Where L = Number of leaf nodes, I = Number of internal nodes
       Complete binary tree eg HEAP
       Perfect Binary TRee all have 2 childrens and leaves at same level
       Balanced Binary Trees R-B trees difference between heights of left and right subtrees is 1

MODULAR
---------
ANY NUMBER CAN BECOME VALID WHEN MODDED TOO
i.e Number of large ranges computer within the mods even divisibility test satisfy

BIT MANIP
---------
__builtin_popcount() --> number of set bits
divisibility by 3 --> number of oddbits set - number of even bits set should be divisible by 3 again recursion!!.

1)get the duplicate element 1,2,2,3
exor with 1 to n IMP--Bit set in resulting exor will be set atleast in one of the repeating numbers so seperate them into two groups by taking LSB x&=-x and then exor the arr[i] checking the bit set or not at rightmost got by x&-x

2) Maximum range in range l to r if given by msb in l^r (msb<<1)-1

Arrays
--------
1) Max sum of subarr --> kadane go on summing and take max but when sm -ve reset to zero
Modified kadane for all -ve 
	resmx=curmx = a[0];
	for : i = 1 to size
	  curmx = max(a[i], curmx+a[i]);
	  resmx = max(resmx, curmx);
	return resmx
2) Maximum 2D subarr inlcusion and exclusion priciple a[x][y]-a[i-1][y]-a[x][j-1]+a[i-1][j-1]

SUBARR OR SUBSTRING -->  N^2
SUBSEQUENCE --> 2^N -1 (excluding empty )
SUBSET --> 2^N (including EMPTY SET )
PERMUTATIONS --> N! do{...}whilenext_permutation(all(str));

MATHEMATICS: (IF VERY BIG INTERGERS 3 METHODS : 1) JAVA BIG INTEGER. 2) WORK WITH PRIME FACTORS. 3) MODULAR ARITHMATIC. )
I) NUMBER THEORY
Root of the Polynomial equation : NEWTON RAPHSON x(n+1) = x(n) - h; (where h = f(x)/f'(x))
				    double h = func(x) / derivFunc(x);
				    while (abs(h) >= EPSILON)
					h = func(x)/derivFunc(x);
					// x(i+1) = x(i) - f(x) / f'(x)  
					x = x - h;

				For Nth root we assume f(x) = x^n-A
Raphini horners method to find given number is root of equation or not	f(x)=x3+4x2+x-6 write coeff
										1  4  1 -6 to check if x+3 is root or not
									    -3  0 -3 -3  6 first will always be zero
									        1  1 -2  0  if zero atlast then it is root
JAVA BIGINTEGER : 1) to compute in different bases  where p and m are numbers in base b
			BigInteger p = new BigInteger(sc.next(), b); 
			BigInteger m = new BigInteger(sc.next(), b);
			System.out.println((p.mod(m)).toString(b));
  		  2) to check probable prime num.isProbablePrime(certinity) --> (1-(1/2)^certainity is the accuracy usuall 10 is enough for cp)
		  3) gcd num_p.gcd(num_q)
		  4) BigInteger p = BigInteger.valueOf(b); Value of converts normal intgers to BigIntegers
		     modular base.modPow(exp,mod)
Binets formula : for nth Fibonacci number : (φ^n − (−φ)^−n )/sqrt(5) (Binet’s formula) where φ (golden ratio)is ((1 + sqrt(5))/2) ≈ 1.618.
Zeckendorf’s theorem: Every positive integer can be written in a unique way as a sum of one or more distinct Fibonacci numbers such that the sum does 			      not include any two consecutive Fibonacci numbers.
Pisano Period where the last one/last two/last three/last four digit(s) of a Fibonacci number repeats with a period of 60/300/1500/15000, respectively
Catlan Numbers: Cat(n) = ( (2×n) C n )/(n + 1); Cat(0) = 1.
		Cat(m) = ((2m×(2m−1))/((m+1)×m)) *Cat(m − 1)
		Used 1) Cat(n) counts the number of distinct binary trees with n vertices
int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); } O(log10(n)), where n = max(a, b).
int lcm(int a, int b) { return a * (b / gcd(a, b)); }
prime numbers are multiplicative building blocks of integers (the fundamental theorem of arithmetic)
prime sieve O(NloglogN) (N× (1/2 + 1/3 + 1/5 + 1/7 + . . . + 1/last prime in range ≤ N))
Prime Factors N = PF * N' where N is the number whose prime factors are to be found 
				PF is one of the prime factors that divide it and 
				N' is the number we get after dividing which is the new N.
	find till sqrt(N) if PF exceeds sqrt(N) than we can conclude that number is prime!!
Number of divisors = a^i × b^j × . . . × c^k , then N has (i + 1) × (j + 1) × . . . × (k + 1) divisors. where a<b<c are prime numbers 
Sum of Divisors of N is (a^(i+1)-1/(a−1)) × (b^(j+1)-1/(b−1))  ×...× (c^(k+1)-1/(c−1))
Euler Phi : φ(N) = N × Prod(pf) (1 − 1/P F );  sum of totient of all divisors = N;
Derangement (DP) formula : A(n) = (n − 1) × (A(n−1) + (A n−2) 
CYCLE FINDING : hare and tortoise x(i)=x(i+kλ)
	Finding kλ : first start hare and tortoise from beginning and tortoise 1 step and hare 2 steps until both equal
	Finding μ: reset hare to start and tortoise at same and move both iteratively as difference b/w then is kλ first occurence of both equal stop 			   and the point where the hare point is the value of μ.
	Finding λ: now tortoise at same place and move hare to next of tortoise and move hare iteratively to right one step when same value as 			   tortoise then the difference b/w them is value of λ.
Extended Euclidean:  Equation ax+by=c d=gcd(a,b)
		     # 3 Cases 1) if d do divide c no solution
			       2) if d==c unique solution(x0,y0) i.e ax+by=gcd(a,b)
			       3) if d divide c infinite solution x = x0+(b/d)n and y=y0-(a/d)n
				extendedEuclid(int a,int b)
				  if(b==0) { x=1;y=0;d=a; return; }
				  extendedEuclid(b,a%b);
				  int x1=y;
				  int y1=x-(a/b)*y;
				  x=x1;
				  y=y1;
CHINESE REMAINDER THEOREM : Z=Cimod(bi)	Z=SUM(Bi*inv(Bi)*Ci)%B;	B -> product(bi) and Bi=B/bi
			    Basically converting all to same modular B which is products of all modular product(bi) by multiplying the other bi 			    product and also there inverses and then adding them and modding with prod gives the answer
HUFFMANN CODING : Make a tree take freq of all the alphabets	https://www.youtube.com/watch?v=vt_Z6tdV81Q
		Recursively combine min two nodes and form single node with sum of both do until full tree is formed
		then left of tree 0 right 1 code the aplbets with given 0111 string while decode traverse through node with same tree
II) MODULAR ARITHMATIC:
Primality Test : if n is prime then a^(n-1)=1 modn Fermat's theorem. a^(n-2)modn=Inv(a)
1) (a + b - c) % s = ((a % s) + (b % s) - (c % s) + s) % s
2) (a * b) % s = (a % s) * (b % s)
3) (a * b) % s = ((a % s) * (b % s)) % s
4) (a / b) % s = ((a % s) / (b % s)) % s
5) (a^b ) % s = ((a^(b/2) % s) * (a^(b/2) % s)) % s; assume that b is even.
TO STUDY
---------
More Advanced Topics	
Geometry
String 
Linear Diophatine Equation
Totiet Videos https://www.youtube.com/watch?v=ccpl3GXMy38
DP
DP on tree DAG
NETWORK FLOW

QUESTIONS
----------
why do u want to work for this company --> research abt company and products and what they do and what u have to offer
Uva Hunt http://codeforces.com/blog/entry/54526
Find Number Patterns http://oeis.org
